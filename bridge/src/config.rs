//! Configuration file module

pub(crate) mod dhcp;

use std::{collections::HashMap, fs::File, io, net::SocketAddr, path::Path};

use serde::{de::DeserializeOwned, Deserialize, Serialize};
use shadesmar_core::types::Ipv4Network;
use uuid::Uuid;

use crate::config::dhcp::DhcpConfig;

pub trait YamlConfig: Sized {
    fn read_yaml_from_file(path: &Path) -> io::Result<Self>;

    fn to_yaml(&self) -> serde_yaml::Result<String>;
}

/// Shadesmar network configuration
///
/// A network config consists of three main sections:
/// - wan: The various upstream / wide area network connections
/// - router: Various router configuration settings
/// - virtio: Virtio configuration settings
#[derive(Debug, Deserialize, Serialize)]
pub struct Config {
    pub wan: Vec<WanConfig>,
    pub router: RouterConfig,
}

/// Contains all information needed to initialize a WAN connection
#[derive(Clone, Debug, Deserialize, Serialize)]
#[serde(rename_all = "lowercase")]
pub struct WanConfig {
    /// Unique id of wan (autogenerated if left blank)
    #[serde(default = "Uuid::now_v7")]
    pub id: Uuid,

    /// Human-friendly name for WAN connection
    pub name: String,

    /// True to capture any packets trasmitted via this WAN
    #[serde(default)]
    pub pcap: bool,

    /// WAN-device specific configuration
    pub device: HashMap<String, String>,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct UdpConfig {
    pub endpoint: SocketAddr,
}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct RouterConfig {
    pub ipv4: Ipv4Network,
    pub dhcp: DhcpConfig,
    pub dns: bool,
    pub table: HashMap<Ipv4Network, String>,
}

impl Config {
    /// Loads a configuration file from disk
    ///
    /// ### Arguments
    /// * `path` - Path to the configuration file
    pub fn load<P: AsRef<Path>>(path: P) -> io::Result<Self> {
        let f = File::open(path)?;
        let cfg: Config =
            serde_yaml::from_reader(f).map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;
        Ok(cfg)
    }

    /// Validates a config by attempting to serialize it
    ///
    /// ### Arguments
    /// * `cfg` - Configuration to validate
    pub fn validate<S: AsRef<str>>(cfg: S) -> io::Result<()> {
        let _cfg: Config = serde_yaml::from_str(cfg.as_ref())
            .map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;

        Ok(())
    }
}

impl<T> YamlConfig for T
where
    T: DeserializeOwned + Serialize,
{
    fn read_yaml_from_file(path: &Path) -> io::Result<Self> {
        let file = File::open(path)?;
        let cfg: T = serde_yaml::from_reader(file).map_err(|e| io::Error::other(e))?;
        Ok(cfg)
    }

    fn to_yaml(&self) -> serde_yaml::Result<String> {
        serde_yaml::to_string(self)
    }
}
